-- CREATE database otus;
-- USE otus;

CREATE SCHEMA IF NOT EXISTS `sbtest` DEFAULT CHARACTER SET utf8 ;

-- MySQL Script generated by MySQL Workbench
-- Пн 02 дек 2019 06:29:21
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema some_business
-- -----------------------------------------------------
-- DROP TABLE IF EXISTS `some_business`.`some_customers_old` ;
-- SHOW WARNINGS;

-- DROP TABLE IF EXISTS `some_business`.`genders` ;
-- SHOW WARNINGS;

-- DROP TABLE IF EXISTS `some_business`.`langs` ;
-- SHOW WARNINGS;

-- DROP TABLE IF EXISTS `some_business`.`marital_statuses` ;
-- SHOW WARNINGS;

-- DROP TABLE IF EXISTS `some_business`.`persons` ;
-- SHOW WARNINGS;

-- DROP TABLE IF EXISTS `some_business`.`countries` ;
-- SHOW WARNINGS;

-- DROP TABLE IF EXISTS `some_business`.`regions` ;
-- SHOW WARNINGS;

-- DROP TABLE IF EXISTS `some_business`.`cities` ;
-- SHOW WARNINGS;

-- DROP TABLE IF EXISTS `some_business`.`postal_codes` ;
-- SHOW WARNINGS;

-- DROP TABLE IF EXISTS `some_business`.`streets` ;
-- SHOW WARNINGS;

-- DROP TABLE IF EXISTS `some_business`.`post_offices` ;
-- SHOW WARNINGS;

-- DROP TABLE IF EXISTS `some_business`.`postal_addresses` ;
-- SHOW WARNINGS;

-- DROP TABLE IF EXISTS `some_business`.`customers` ;
-- SHOW WARNINGS;

-- DROP TABLE IF EXISTS `some_business`.`organizations` ;
-- SHOW WARNINGS;

-- DROP TABLE IF EXISTS `some_business`.`producers` ;
-- SHOW WARNINGS;

-- DROP TABLE IF EXISTS `some_business`.`providers` ;
-- SHOW WARNINGS;

-- DROP TABLE IF EXISTS `some_business`.`currencies` ;
-- SHOW WARNINGS;

-- DROP TABLE IF EXISTS `some_business`.`currencies_rates` ;
-- SHOW WARNINGS;

-- DROP TABLE IF EXISTS `some_business`.`bonds_lyfecycle_phases` ;
-- SHOW WARNINGS;

-- DROP TABLE IF EXISTS `some_business`.`bonds` ;
-- SHOW WARNINGS;

-- DROP TABLE IF EXISTS `some_business`.`bonds_lc_dates` ;
-- SHOW WARNINGS;

-- DROP TABLE IF EXISTS `some_business`.`quotations_ts` ;
-- SHOW WARNINGS;

-- DROP TABLE IF EXISTS `some_business`.`bonds_classifier_dictionaries` ;
-- SHOW WARNINGS;

-- DROP TABLE IF EXISTS `some_business`.`portfolios` ;
-- SHOW WARNINGS;

-- DROP TABLE IF EXISTS `some_business`.`portfolios_operations` ;
-- SHOW WARNINGS;

-- DROP TABLE IF EXISTS `some_business`.`bonds_classifier_dct_items` ;
-- SHOW WARNINGS;

-- DROP TABLE IF EXISTS `some_business`.`bonds_classifier` ;
-- SHOW WARNINGS;

-- --------

-- DROP SCHEMA IF EXISTS `some_business` ;

-- -----------------------------------------------------
-- Schema some_business
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `some_business` DEFAULT CHARACTER SET utf8 ;
SHOW WARNINGS;
USE `some_business` ;

-- -----------------------------------------------------
-- Table `some_business`.`some_customers_old`
-- -----------------------------------------------------

CREATE TABLE IF NOT EXISTS `some_business`.`some_customers_old` (
  `title` VARCHAR(64) CHARACTER SET 'utf8' COLLATE 'utf8_bin' NULL DEFAULT NULL,
  `first_name` VARCHAR(128) NULL DEFAULT NULL,
  `last_name` VARCHAR(128) NULL DEFAULT NULL,
  `correspondence_language` VARCHAR(2) NULL DEFAULT NULL,
  `birth_date` DATE NULL DEFAULT NULL,
  `gender` VARCHAR(7) NULL DEFAULT NULL,
  `marital_status` VARCHAR(7) NULL DEFAULT NULL,
  `country` VARCHAR(2) NULL DEFAULT NULL,
  `postal_code` VARCHAR(32) NULL DEFAULT NULL,
  `region` VARCHAR(255) NULL DEFAULT NULL,
  `city` VARCHAR(255) NULL DEFAULT NULL,
  `street` VARCHAR(255) NULL DEFAULT NULL,
  `building_number` VARCHAR(32) NULL DEFAULT NULL)
ENGINE = InnoDB;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `some_business`.`genders`
-- -----------------------------------------------------

CREATE TABLE IF NOT EXISTS `some_business`.`genders` (
  `id_gender` SMALLINT(2) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'PK INT AI NN UN',
  `name` VARCHAR(255) NULL COMMENT 'Название пола',
  `code` VARCHAR(45) NULL COMMENT 'Буквенный код пола',
  PRIMARY KEY (`id_gender`),
  UNIQUE INDEX `name_UNIQUE` (`name` ASC),
  UNIQUE INDEX `code_UNIQUE` (`code` ASC)
)
ENGINE = InnoDB
COMMENT = 'Справочник \"Пол человека\"';

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `some_business`.`langs`
-- -----------------------------------------------------

CREATE TABLE IF NOT EXISTS `some_business`.`langs` (
  `id_lang` SMALLINT(5) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'PK INT AI NN UN',
  `name` VARCHAR(255) NULL COMMENT 'Название языка. Без локализации',
  `code` VARCHAR(3) NULL COMMENT 'Трёхбуквенный код языка по iso',
  PRIMARY KEY (`id_lang`),
  UNIQUE INDEX `name_UNIQUE` (`name` ASC),
  UNIQUE INDEX `code_UNIQUE` (`code` ASC)
)
ENGINE = InnoDB
COMMENT = 'Справочник языков';

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `some_business`.`marital_statuses`
-- -----------------------------------------------------

CREATE TABLE IF NOT EXISTS `some_business`.`marital_statuses` (
  `id_marital_status` SMALLINT(2) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'PK INT AI NN UN',
  `name` VARCHAR(255) NULL COMMENT 'Название семейного статуса. Без локализации.',
  PRIMARY KEY (`id_marital_status`),
  UNIQUE INDEX `name_UNIQUE` (`name` ASC)
)
ENGINE = InnoDB
COMMENT = 'Справочник \"Семейное положение\"';

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `some_business`.`persons`
-- -----------------------------------------------------

CREATE TABLE IF NOT EXISTS `some_business`.`persons` (
  `id_person` BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'PK INT AI NN UN',
  `email` VARCHAR(255) NOT NULL COMMENT 'Уникальное поле, строковый человекочитаемый интернационально понятный идентификатор',
  `title` VARCHAR(64) NULL COMMENT 'префикс-обращение, произвольная строка типа мисс, проф и т.п.',
  `first_name` VARCHAR(128) NULL COMMENT 'Имя',
  `last_name` VARCHAR(128) NULL COMMENT 'Фамилия или аналог',
  `correspondence_language` SMALLINT(5) UNSIGNED NULL COMMENT 'Язык общения с клиентом, язык для юридических документов и т.п.',
  `birth_date` DATE NULL COMMENT 'Дата рождения',
  `gender` SMALLINT(2) UNSIGNED NULL COMMENT 'Пол',
  `marital_status` SMALLINT(2) UNSIGNED NULL COMMENT 'Семейное положение',
  PRIMARY KEY (`id_person`),
  UNIQUE INDEX `email_UNIQUE` (`email` ASC),
  INDEX `genders_idx` (`gender` ASC),
  INDEX `langs_idx` (`correspondence_language` ASC),
  INDEX `marital_statuses_idx` (`marital_status` ASC),
  CONSTRAINT `persons_genders`
    FOREIGN KEY (`gender`)
    REFERENCES `some_business`.`genders` (`id_gender`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `persons_langs`
    FOREIGN KEY (`correspondence_language`)
    REFERENCES `some_business`.`langs` (`id_lang`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `persons_marital_statuses`
    FOREIGN KEY (`marital_status`)
    REFERENCES `some_business`.`marital_statuses` (`id_marital_status`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Персоны. Тезнический идентификатор - id_person, идентификатор из мира людей - email.\nВсе люди, необходимые для системы, будут здесь; нечто вроде справочника людей.';

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `some_business`.`countries`
-- -----------------------------------------------------

CREATE TABLE IF NOT EXISTS `some_business`.`countries` (
  `id_country` SMALLINT(5) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'PK INT AI NN UN',
  `name` VARCHAR(255) NULL COMMENT 'Название страны. Без локализации.',
  `code` VARCHAR(5) NULL COMMENT 'Код страны по iso такому-то',
  PRIMARY KEY (`id_country`),
  UNIQUE INDEX `name_UNIQUE` (`name` ASC),
  UNIQUE INDEX `code_UNIQUE` (`code` ASC)
)
ENGINE = InnoDB
COMMENT = 'Справочник стран';

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `some_business`.`regions`
-- -----------------------------------------------------

CREATE TABLE IF NOT EXISTS `some_business`.`regions` (
  `id_region` MEDIUMINT(8) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'PK INT AI NN UN',
  `country_id` SMALLINT(5) UNSIGNED NULL COMMENT 'FK на страну',
  `name` VARCHAR(255) NULL COMMENT 'Название региона. Без локализации.',
  PRIMARY KEY (`id_region`),
  INDEX `country_idx` (`country_id` ASC),
  UNIQUE INDEX `country_name` (`country_id` ASC, `name` ASC),
  CONSTRAINT `regions_country`
    FOREIGN KEY (`country_id`)
    REFERENCES `some_business`.`countries` (`id_country`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Справочник регионов стран (провинции и т.п.) Завязан на \"родителя\" - справочник стран.';

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `some_business`.`cities`
-- -----------------------------------------------------

CREATE TABLE IF NOT EXISTS `some_business`.`cities` (
  `id_city` MEDIUMINT(8) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'PK INT AI NN UN',
  `region_id` MEDIUMINT(8) UNSIGNED NULL COMMENT 'FK на регион',
  `name` VARCHAR(255) NULL COMMENT 'Название города. Без локализации.',
  PRIMARY KEY (`id_city`),
  INDEX `region_idx` (`region_id` ASC),
  CONSTRAINT `cities_region`
    FOREIGN KEY (`region_id`)
    REFERENCES `some_business`.`regions` (`id_region`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Справочник городов. Завязан на \"родителя\" - справочник регионов, а через него - на справочник стран.';

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `some_business`.`postal_codes`
-- -----------------------------------------------------

CREATE TABLE IF NOT EXISTS `some_business`.`postal_codes` (
  `id_postal_code` BIGINT(20) UNSIGNED NOT NULL,
  `city_id` MEDIUMINT(8) UNSIGNED NULL,
  `code` VARCHAR(255) NULL,
  PRIMARY KEY (`id_postal_code`),
  INDEX `city_idx` (`city_id` ASC),
  UNIQUE INDEX `city_code` (`city_id` ASC, `code` ASC),
  CONSTRAINT `postal_codes_city`
    FOREIGN KEY (`city_id`)
    REFERENCES `some_business`.`cities` (`id_city`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `some_business`.`streets`
-- -----------------------------------------------------

CREATE TABLE IF NOT EXISTS `some_business`.`streets` (
  `id_street` BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'PK INT AI NN UN',
  `city_id` MEDIUMINT(8) UNSIGNED NULL COMMENT 'FK на город',
  `name` VARCHAR(255) NULL COMMENT 'Название улицы. Без локализации.',
  PRIMARY KEY (`id_street`),
  INDEX `city_idx` (`city_id` ASC),
  UNIQUE INDEX `city_name` (`city_id` ASC, `name` ASC),
  CONSTRAINT `streets_city`
    FOREIGN KEY (`city_id`)
    REFERENCES `some_business`.`cities` (`id_city`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Справочник улиц городов мира. Завязан на города, через них на регионы, через них на страны.';

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `some_business`.`post_offices`
-- -----------------------------------------------------

CREATE TABLE IF NOT EXISTS `some_business`.`post_offices` (
  `id_post_office` BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'PK INT AI NN UN',
  `postal_code_id` BIGINT(20) UNSIGNED NULL COMMENT 'FK на почтовые индексы',
  `street_id` BIGINT(20) UNSIGNED NULL COMMENT 'FK на улицы',
  `name` VARCHAR(255) NULL COMMENT 'Название почтового отделения. Без локализации.',
  PRIMARY KEY (`id_post_office`),
  INDEX `postal_code_idx` (`postal_code_id` ASC),
  INDEX `street_idx` (`street_id` ASC),
  UNIQUE INDEX `zip_street_uniq` (`postal_code_id` ASC, `street_id` ASC),
  CONSTRAINT `post_offices_postal_code`
    FOREIGN KEY (`postal_code_id`)
    REFERENCES `some_business`.`postal_codes` (`id_postal_code`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `post_offices_street`
    FOREIGN KEY (`street_id`)
    REFERENCES `some_business`.`streets` (`id_street`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Почтовые отделения. Таблица-связка индексов и улиц \"многие ко многим\". Таблица выступает справочником для поля из таблицы почтовых адресов.';

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `some_business`.`postal_addresses`
-- -----------------------------------------------------

CREATE TABLE IF NOT EXISTS `some_business`.`postal_addresses` (
  `id_postal_address` BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'PK INT AI NN UN',
  `post_office_id` BIGINT(20) UNSIGNED NULL COMMENT 'FK на почтовое отделение (а оно соединяет индекс и улицу)',
  `building_number` VARCHAR(255) NULL COMMENT 'Номер дома. Строка, включающая идентификатор строения и помещения.',
  PRIMARY KEY (`id_postal_address`),
  UNIQUE INDEX `address` (`post_office_id` ASC, `building_number` ASC),
  CONSTRAINT `postal_addresses_postal_office`
    FOREIGN KEY (`post_office_id`)
    REFERENCES `some_business`.`post_offices` (`id_post_office`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Почтовые адреса. Почтовое отделение плюс номер строения/помещения и т.п.\nДолжна выступать в качестве \"справочника\" для всяких адресов - прописки людей, адресов доставки, юрадресов компаний и т.п.';

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `some_business`.`customers`
-- -----------------------------------------------------

CREATE TABLE IF NOT EXISTS `some_business`.`customers` (
  `id_customer` BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'PK INT AI NN UN',
  `persons_id` BIGINT(20) UNSIGNED NULL COMMENT 'FK на персону',
  `postal_address_id` BIGINT(20) UNSIGNED NULL COMMENT 'FK на адрес',
  PRIMARY KEY (`id_customer`),
  UNIQUE INDEX `person_id_UNIQUE` (`persons_id` ASC),
  INDEX `postal_addresses_idx` (`postal_address_id` ASC),
  CONSTRAINT `customers_persons`
    FOREIGN KEY (`persons_id`)
    REFERENCES `some_business`.`persons` (`id_person`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `customers_postal_addresses`
    FOREIGN KEY (`postal_address_id`)
    REFERENCES `some_business`.`postal_addresses` (`id_postal_address`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Таблица клиентов. Персона и адрес для связи (в юридическом смысле, а-ля прописка, текущий юрадрес персоны для официальной корреспонденции и т.п.).';

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `some_business`.`organizations`
-- -----------------------------------------------------

CREATE TABLE IF NOT EXISTS `some_business`.`organizations` (
  `id_organization` BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'PK INT AI NN UN',
  `short_name` VARCHAR(128) NULL COMMENT 'Краткое название организации',
  `full_name` VARCHAR(255) NULL COMMENT 'Длинное название организации',
  `contact_person_id` BIGINT(20) UNSIGNED NULL COMMENT 'FK на персону. Контактное лицо от организации.',
  `postal_address_id` BIGINT(20) UNSIGNED NULL COMMENT 'FK на адрес. Юрадрес или постовый адрес организации.',
  `org_uniq_code` VARCHAR(64) NULL COMMENT 'Уникальный код организации, в зависимости от страны - ОКПО и вот это вот всё. Произвольная строка. Используется для однозначной идентификации в случае совпадения названий всех ООО Парус.',
  PRIMARY KEY (`id_organization`),
  UNIQUE INDEX `org_uniq_code_UNIQUE` (`org_uniq_code` ASC),
  INDEX `contact_person_idx` (`contact_person_id` ASC),
  INDEX `postal_address_idx` (`postal_address_id` ASC),
  CONSTRAINT `organizations_contact_person`
    FOREIGN KEY (`contact_person_id`)
    REFERENCES `some_business`.`persons` (`id_person`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `organizations_postal_address`
    FOREIGN KEY (`postal_address_id`)
    REFERENCES `some_business`.`postal_addresses` (`id_postal_address`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Все организации, необходимые для системы, будут здесь; нечто вроде справочника организаций.\nДолжна выступать в качестве \"справочника\" для всяких организаци - поставщиков, производителей, всяких контрагентов и т.п.\nТехнический идентификатор - id (PK), идентификатор из жизни - org_uniq_code (произвольная строка)';

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `some_business`.`producers`
-- -----------------------------------------------------

CREATE TABLE IF NOT EXISTS `some_business`.`producers` (
  `id_producer` BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'PK INT AI NN UN',
  `organization_id` BIGINT(20) UNSIGNED NOT NULL COMMENT 'FK на таблицу организаций',
  PRIMARY KEY (`id_producer`),
  UNIQUE INDEX `producer_organization_idx` (`organization_id` ASC),
  CONSTRAINT `producer_organization`
    FOREIGN KEY (`organization_id`)
    REFERENCES `some_business`.`organizations` (`id_organization`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Производители. Справочник производителей для товаров каталога.\nМожно использовать для построения витрин товаров типа \"все товары производителя такого-то\".';

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `some_business`.`providers`
-- -----------------------------------------------------

CREATE TABLE IF NOT EXISTS `some_business`.`providers` (
  `id_provider` BIGINT(4) UNSIGNED NOT NULL COMMENT 'PK INT AI NN UN',
  `organization_id` BIGINT(20) UNSIGNED NOT NULL COMMENT 'FK на таблицу организаций',
  PRIMARY KEY (`id_provider`),
  UNIQUE INDEX `provider_organization_idx` (`organization_id` ASC),
  CONSTRAINT `provider_organization`
    FOREIGN KEY (`organization_id`)
    REFERENCES `some_business`.`organizations` (`id_organization`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Поставщики. Справочник поставщиков для торговых позиций в продаже.\nДля бухгалтерии или даже для покупателя, если ему важен поставщик, а не только производитель.\nТак же будет фактором разветвления одного товара каталога на несколько торговых позиций.';

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `some_business`.`currencies`
-- -----------------------------------------------------

CREATE TABLE IF NOT EXISTS `some_business`.`currencies` (
  `id_currency` SMALLINT(3) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'PK INT AI NN UN',
  `currency_code` VARCHAR(3) NULL COMMENT 'Трёхбуквенный код валюты по iso такому-то',
  PRIMARY KEY (`id_currency`),
  UNIQUE INDEX `currency_code_UNIQUE` (`currency_code` ASC)
)
ENGINE = InnoDB
COMMENT = 'Словарь валют';

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `some_business`.`currencies_rates`
-- -----------------------------------------------------

CREATE TABLE IF NOT EXISTS `some_business`.`currencies_rates` (
  `id_currencies_rate` BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'PK INT AI NN UN',
  `rate_date` DATE NULL COMMENT 'Дата котировки',
  `currency_from` SMALLINT(3) UNSIGNED NULL COMMENT 'FK Валюта один',
  `currency_to` SMALLINT(3) UNSIGNED NULL COMMENT 'FK Валюта два',
  `rate` DOUBLE NULL COMMENT 'Курс',
  PRIMARY KEY (`id_currencies_rate`),
  INDEX `currency_from_idx` (`currency_from` ASC),
  INDEX `currency_to_idx` (`currency_to` ASC),
  UNIQUE INDEX `date_c1_c2` (`rate_date` ASC, `currency_from` ASC, `currency_to` ASC),
  CONSTRAINT `currency_from`
    FOREIGN KEY (`currency_from`)
    REFERENCES `some_business`.`currencies` (`id_currency`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `currency_to`
    FOREIGN KEY (`currency_to`)
    REFERENCES `some_business`.`currencies` (`id_currency`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Обменные курсы валют\nДля пересчёта цен на дату по парам\nПри отсутствии пары - работаем по кросс-курсу через доллар, евро и т.п. по алгоритму приложения';

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `some_business`.`bonds_lyfecycle_phases`
-- -----------------------------------------------------

CREATE TABLE IF NOT EXISTS `some_business`.`bonds_lyfecycle_phases` (
  `id_lc_phases` SMALLINT(2) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'PK INT AI NN UN',
  `name` VARCHAR(255) NULL COMMENT 'Название стадии. Без локализации.',
  PRIMARY KEY (`id_lc_phases`),
  UNIQUE INDEX `name_UNIQUE` (`name` ASC)
)
ENGINE = InnoDB
COMMENT = 'Справочник стадий жизненного цикла облигаций - размещение, в обращении, погашена, дефолт и т.п.';

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `some_business`.`bonds`
-- -----------------------------------------------------

CREATE TABLE IF NOT EXISTS `some_business`.`bonds` (
  `id_bond` BIGINT(8) UNSIGNED NOT NULL COMMENT 'PK INT AI NN UN',
  `isin` VARCHAR(32) NULL COMMENT 'Уникальный строковый идентификатор',
  `producer_id` BIGINT(20) UNSIGNED NULL COMMENT 'FK на производителя (эмитент выпуска облигаций)',
  `nominal_price` DOUBLE NULL COMMENT 'номинальная цена',
  `lifecycle_phase` SMALLINT(2) UNSIGNED NULL COMMENT 'FK на справочник стадий жизненного цикла',
  `currency_id` SMALLINT(2) UNSIGNED NULL COMMENT 'FK валюта выпуска',
  PRIMARY KEY (`id_bond`),
  UNIQUE INDEX `isin_UNIQUE` (`isin` ASC),
  INDEX `producer_idx` (`producer_id` ASC),
  INDEX `currency_idx` (`currency_id` ASC),
  INDEX `lcphase_idx` (`lifecycle_phase` ASC),
  CONSTRAINT `bonds_producer`
    FOREIGN KEY (`producer_id`)
    REFERENCES `some_business`.`producers` (`id_producer`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `bonds_currency`
    FOREIGN KEY (`currency_id`)
    REFERENCES `some_business`.`currencies` (`id_currency`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `bonds_lcphase`
    FOREIGN KEY (`lifecycle_phase`)
    REFERENCES `some_business`.`bonds_lyfecycle_phases` (`id_lc_phases`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `some_business`.`bonds_lc_dates`
-- -----------------------------------------------------

CREATE TABLE IF NOT EXISTS `some_business`.`bonds_lc_dates` (
  `bond_id` BIGINT(8) UNSIGNED NOT NULL COMMENT 'PK - FK на bonds',
  `date_start_pacing` DATE NULL COMMENT 'Дата начала размещения',
  `date_end_placing` DATE NULL COMMENT 'Дата окончания размещения',
  `date_maturity` DATE NULL COMMENT 'Дата погашения',
  `date_redemption` DATE NULL COMMENT 'Дата досрочного погашения',
  `date_start_circulation` DATE NULL COMMENT 'Дата начала обращения',
  PRIMARY KEY (`bond_id`),
  UNIQUE INDEX `bond_id_UNIQUE` (`bond_id` ASC),
    FOREIGN KEY (`bond_id`)
    REFERENCES `some_business`.`bonds` (`id_bond`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Даты жизненного цикла облигации';

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `some_business`.`quotations_ts`
-- -----------------------------------------------------

CREATE TABLE IF NOT EXISTS `some_business`.`quotations_ts` (
  `id_quotation_ts` BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'INT AI NN UN',
  `bond_id` BIGINT(8) UNSIGNED NOT NULL COMMENT 'Id товара (облигации) - FK на bonds',
  `provider_id` BIGINT(4) UNSIGNED NOT NULL COMMENT 'Id поставщика (биржи) - FK на providers',
  `date_quote` DATE NOT NULL COMMENT 'Дата котировки',
  `price_bid` DOUBLE NULL,
  `price_ask` DOUBLE NULL,
  `price_indicative` DOUBLE NULL,
  `yield_indicative` DOUBLE NULL,
  PRIMARY KEY (`id_quotation_ts`, `bond_id`, `provider_id`, `date_quote`),
  UNIQUE INDEX `quote_uniq` (`bond_id` ASC, `provider_id` ASC, `date_quote` ASC),
  INDEX `provider_idx` (`provider_id` ASC)
  /*
  ,
  CONSTRAINT `bond`
    FOREIGN KEY (`bond_id`)
    REFERENCES `some_business`.`bonds` (`id_bond`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `provider`
    FOREIGN KEY (`provider_id`)
    REFERENCES `some_business`.`providers` (`id_provider`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
  */
)
ENGINE = InnoDB
COMMENT = 'Архив торговых предложений (архив биржевых котировок облигаций)'
PARTITION BY RANGE(provider_id) PARTITIONS 4 (
	PARTITION p1 VALUES LESS THAN (2),
	PARTITION p4 VALUES LESS THAN (5),
	PARTITION p9 VALUES LESS THAN (10),
	PARTITION p0 VALUES LESS THAN (MAXVALUE)
) ;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `some_business`.`bonds_classifier_dictionaries`
-- -----------------------------------------------------

CREATE TABLE IF NOT EXISTS `some_business`.`bonds_classifier_dictionaries` (
  `id_classifier_dictionary` BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'PK INT AI NN UN',
  `dct_name` VARCHAR(45) NULL COMMENT 'Название словаря',
  PRIMARY KEY (`id_classifier_dictionary`),
  UNIQUE INDEX `dct_name_UNIQUE` (`dct_name` ASC)
)
ENGINE = InnoDB
COMMENT = 'Все словари для классификатора бондов одной простынёй';

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `some_business`.`portfolios`
-- -----------------------------------------------------

CREATE TABLE IF NOT EXISTS `some_business`.`portfolios` (
  `id_portfolio` BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'PK INT AI NN UN',
  `customer_id` BIGINT(20) UNSIGNED NULL COMMENT 'Покупатель - FK на customers',
  `create_time` TIMESTAMP(0) NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Датавремя создания (авто)',
  PRIMARY KEY (`id_portfolio`),
  INDEX `created` (`create_time` ASC),
  INDEX `customer_idx` (`customer_id` ASC),
  CONSTRAINT `portfolios_customer`
    FOREIGN KEY (`customer_id`)
    REFERENCES `some_business`.`customers` (`id_customer`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `some_business`.`portfolios_operations`
-- -----------------------------------------------------

CREATE TABLE IF NOT EXISTS `some_business`.`portfolios_operations` (
  `id_portfolios_operation` BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `portfolio_id` BIGINT(20) UNSIGNED NULL COMMENT 'FK на портфель',
  `quotation_id` BIGINT(20) UNSIGNED NULL COMMENT 'FK на торговое предложение (котировки облигации от биржи на дату)',
  `amount` DOUBLE NULL,
  `operation_ts` TIMESTAMP(0) NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Датавремя операции (авто)',
  PRIMARY KEY (`id_portfolios_operation`),
  INDEX `quotation_idx` (`quotation_id` ASC),
  INDEX `portfolio_idx` (`portfolio_id` ASC),
  /*
  CONSTRAINT `portfolios_operations_quotation`
    FOREIGN KEY (`quotation_id`)
    REFERENCES `some_business`.`quotations_ts` (`id_quotation_ts`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  */
  CONSTRAINT `portfolios_operations_portfolio`
    FOREIGN KEY (`portfolio_id`)
    REFERENCES `some_business`.`portfolios` (`id_portfolio`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `some_business`.`bonds_classifier_dct_items`
-- -----------------------------------------------------

CREATE TABLE IF NOT EXISTS `some_business`.`bonds_classifier_dct_items` (
  `id_classifier_item` BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Позиция в словаре',
  `dictionary_id` BIGINT(20) UNSIGNED NULL COMMENT 'FK ссылка на словарь',
  `item_int_val` SMALLINT(3) NULL COMMENT 'Числовое (для выборки и связей) значение позиции в словаре',
  `item_name` VARCHAR(45) NULL COMMENT 'Строковое (визуализируемое) значение позиции в словаре',
  PRIMARY KEY (`id_classifier_item`),
  UNIQUE INDEX `item_uniq` (`dictionary_id` ASC, `item_int_val` ASC),
  UNIQUE INDEX `item_uniq2` (`dictionary_id` ASC, `item_name` ASC),
  CONSTRAINT `bonds_classifier_dct_items_dictionary`
    FOREIGN KEY (`dictionary_id`)
    REFERENCES `some_business`.`bonds_classifier_dictionaries` (`id_classifier_dictionary`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `some_business`.`bonds_classifier`
-- -----------------------------------------------------

CREATE TABLE IF NOT EXISTS `some_business`.`bonds_classifier` (
  `id_bonds_classifier` BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'явный PK INT UN AI для связей',
  `bond_id` BIGINT(20) UNSIGNED NULL COMMENT 'FK на позицию каталога (облигация (bond))',
  `dct_id` BIGINT(20) UNSIGNED NULL COMMENT 'FK на классификационный словарь',
  `dct_item_id` BIGINT(20) UNSIGNED NULL COMMENT 'FK на позицию в словаре (значение)',
  PRIMARY KEY (`id_bonds_classifier`),
  UNIQUE INDEX `bond_dct` (`bond_id` ASC, `dct_id` ASC),
  INDEX `dct_idx` (`dct_id` ASC),
  INDEX `item_idx` (`dct_item_id` ASC),
  CONSTRAINT `bonds_classifier_bond`
    FOREIGN KEY (`bond_id`)
    REFERENCES `some_business`.`bonds` (`id_bond`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `bonds_classifier_dct`
    FOREIGN KEY (`dct_id`)
    REFERENCES `some_business`.`bonds_classifier_dictionaries` (`id_classifier_dictionary`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `bonds_classifier_item`
    FOREIGN KEY (`dct_item_id`)
    REFERENCES `some_business`.`bonds_classifier_dct_items` (`id_classifier_item`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Вся классификация облигаций (товара каталога) по классификационным словарям одной простынёй';

SHOW WARNINGS;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;